{"version":3,"sources":["SummerTechTheme.js","SignupLogin.js","TransactionView.js","App.js","AuthForm.js","serviceWorker.js","index.js"],"names":["theme","global","colors","brand","control","dark","light","focus","neutral-1","neutral-2","neutral-3","neutral-4","undefined","accent-1","accent-2","accent-3","dark-1","dark-2","sky","neutral","button","primary","color","text","SignupLogin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cookies","Cookies","get","fetch","method","headers","Content-Type","body","JSON","stringify","password","then","response","json","set","address","setState","username","onClickLogin","bind","assertThisInitialized","state","history","push","react_default","a","createElement","Grommet","Box","justify","align","fill","basis","Heading","responsive","margin","top","bottom","size","Paragraph","Grid","Button","label","href","onClick","event","Component","withRouter","TransactionView","type","rows","columns","SubtractCircle","textAlign","right","gap","timestamp","amount","recipient","direction","left","AddCircle","alignSelf","sender","App","errorAlert","message","toast","error","infoAlert","info","successAlert","success","fetchBalance","onSubmitTx","handleScan","handleScanError","makeRedeemableAccount","showRedeemable","recipient_input","React","createRef","printTriggerRef","showSendModal","showAddressModal","showQRReader","alreadyPoppedRedeemable","balance","transactions","sendAddressValue","shouldMakeRedeemable","redeemableAccount","lastPayload","showRedeemableModal","showRedeemModal","_this2","includes","remove","window","setInterval","oldBalance","parse","fetchTransactions","_this3","src_SignupLogin_0","react_toastify","main_default","seed","scale","className","react_media","query","overflow","vertical","height","renderTransactions","alignContent","showRedeem","_this4","_this5","_this6","Layer","onEsc","onClickOutside","modal","Close","cursor","react_qr_reader_lib_default","facingMode","onScan","onError","_this7","lib_default","value","react_copy_to_clipboard_lib","_this8","pad","Form","onSubmit","FormField","name","ref","placeholder","required","TextInput","onChange","target","_this9","redeemableUsername","Math","random","toString","substring","redeemablePassword","sha3_512","_this10","id","printContents","node","document","getElementById","domtoimage","toJpeg","bgcolor","dataUrl","print","printable","imageStyle","catch","console","scan","_this11","split","redeemableBalance","fetchBalancePure","err","_this12","preventDefault","formData","parseFloat","payload","refs","replace","_this13","x","transactionViews","length","hash","TransactionView_TransactionView","key","time","AuthForm","password_text_input","alert","onSubmitCreate","onSubmitAuth","Boolean","location","hostname","match","store","createStore","combineReducers","routing","routerReducer","es","react_router_dom","react_router","exact","path","component","render","src_AuthForm","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b65575ee.chunk.js","sourcesContent":["export const theme = {\n  global: {\n    colors: {\n      brand: \"#ffffff\",\n      control: {\n        dark: \"#0288D1\",\n        light: \"#03A9F4\",\n      },\n      focus: \"#cceeff\",\n      \"neutral-1\": \"#757575\",\n      \"neutral-2\": \"#005584\",\n      \"neutral-3\": \"#005584\",\n      \"neutral-4\": undefined,\n      \"accent-1\": \"#FFC107\",\n      \"accent-2\": \"#FFC107\",\n      \"accent-3\": \"#03A9F4\",\n      \"dark-1\": \"#000001\",\n      \"dark-2\": \"#646569\",\n      \"sky\": \"#CAEBF2\",\n      \"neutral\": \"#EFEFEF\"\n    },\n    button: {\n      primary: {\n        color: \"#ffffff\",\n        text: \"#ffffff\",\n      },\n      colors: {\n        text: \"#ffffff\"\n      }\n    }\n  },\n};","import React, {\n  Component\n} from 'react';\nimport './SignupLogin.css';\nimport {\n  Grommet,\n  Heading,\n  Button,\n  Paragraph,\n  Box,\n  Grid\n} from 'grommet';\nimport {\n  theme\n} from './SummerTechTheme'; // Import SummerTech theme\nimport Cookies from 'universal-cookie'; // Import cookies\nimport {\n  withRouter\n} from 'react-router-dom'; // Import router\n\nclass SignupLogin extends Component {\n  // construct a new App component instance\n  constructor(props) {\n    super(props); // Super props\n\n    const cookies = new Cookies(); // Initialize cookies\n\n    if (cookies.get(\"username\") !== undefined && cookies.get(\"username\") !== \"\" && cookies.get(\"username\") !== \"not-signed-in\") { // Check already signed in\n      fetch(\"/api/accounts/\" + cookies.get(\"username\") + \"/authenticate\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            password: cookies.get(\"password\"),\n          })\n        }).then((response) => response.json())\n        .then(response => {\n          cookies.set('address', response.address); // Set address\n\n          this.setState({\n            username: cookies.get('username') || 'not-signed-in', // Set username cookie\n            password: cookies.get('password') || 'not-signed-in', // Set password\n            address: cookies.get('address') || 'not-signed-in', // Set address\n          }) // Set state\n        })\n    }\n\n    this.onClickLogin = this.onClickLogin.bind(this); // Bind this\n  }\n\n  render() {\n    if (this.state !== undefined && this.state !== null && this.state.username !== \"\" && this.state.username !== \"not-signed-in\" && this.state.address !== \"\" && this.address !== \"not-signed-in\") { // Check signed in\n      this.props.history.push(\"/\"); // Go to app\n    }\n\n    return ( <\n      Grommet theme = {\n        theme\n      } >\n      <\n      Box justify = \"center\"\n      align = \"center\"\n      fill = {\n        true\n      }\n      basis = \"large\" >\n      <\n      Heading responsive = {\n        true\n      }\n      margin = {\n        {\n          top: \"none\",\n          bottom: \"none\"\n        }\n      }\n      size = \"large\" >\n      NoCash <\n      /Heading>\n\n      <\n      Paragraph responsive = {\n        true\n      }\n      size = \"xxlarge\" >\n      Save, store, and send NoCash Virtual Wallet. <\n      /Paragraph>\n\n      <\n      Grid >\n      <\n      Button responsive = {\n        true\n      }\n      size = \"xlarge\"\n      primary color = \"sky\"\n      label = \"Create New Wallet\"\n      href = \"signup\" / >\n      <\n      Button responsive = {\n        true\n      }\n      size = \"xlarge\"\n      primary color = \"neutral\"\n      margin = \"small\"\n      label = \"Sign In\"\n      onClick = {\n        this.onClickLogin\n      }\n      /> <\n      /Grid> <\n      /Box> <\n      /Grommet>\n    );\n  }\n\n  // onClickLogin handles the login event.\n  onClickLogin(event) {\n    this.props.history.push(\"/login\"); // Go to login\n  }\n}\n\nexport default withRouter(SignupLogin); // Force use router","import React, { Component } from \"react\";\nimport { theme } from './SummerTechTheme'; // Import SummerTech theme\nimport { Grommet, Paragraph, Box, Grid } from 'grommet';\nimport { SubtractCircle, AddCircle } from 'grommet-icons'; // Import grommet icons\n\nexport default class TransactionView extends Component {\n  render() {\n    if (this.props.type === \"send\") { // Check is send\n      return (\n        <Grommet theme={ theme }>\n          <Grid rows={[\"xxsmall\"]} columns={[ \"xxsmall\", \"19%\", \"small\", \"small\" ]} align=\"center\">\n            <SubtractCircle/>\n            <Paragraph responsive={ true } textAlign=\"start\" margin={{ right: this.props.gap }}>\n              { this.props.timestamp }\n            </Paragraph>\n            <Paragraph responsive={ true } textAlign=\"end\">\n              Sent { this.props.amount } SMC\n            </Paragraph>\n            <Paragraph responsive={ true }>\n              to { this.props.recipient }\n            </Paragraph>\n          </Grid>\n        </Grommet>\n      );\n    } else {\n      return (\n        <Grommet theme={ theme }>\n          <Box direction=\"row-responsive\" align=\"center\" margin={{ left: this.props.margin, top: \"none\" }} gap={ this.props.gap }>\n            <AddCircle/>\n            <Paragraph responsive={ true }>\n              { this.props.timestamp }\n            </Paragraph>\n            <Paragraph responsive={ true }>\n              Received { this.props.amount } SMC\n            </Paragraph>\n            <Paragraph responsive={ true } alignSelf=\"end\" textAlign=\"end\">\n              from { this.props.sender }\n            </Paragraph>\n          </Box>\n        </Grommet>\n      );\n    }\n  }\n}\n","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport Cookies from 'universal-cookie';\nimport SignupLogin from './SignupLogin'; // Import signup login page\nimport {\n  theme\n} from './SummerTechTheme'; // Import SummerTech theme\nimport {\n  Grommet,\n  Heading,\n  Paragraph,\n  Box,\n  Button,\n  Layer,\n  Form,\n  FormField,\n  TextInput\n} from 'grommet';\nimport Blockies from 'react-blockies'; // Import identicons\nimport {\n  ToastContainer,\n  toast\n} from 'react-toastify'; // Import toast\nimport TransactionView from './TransactionView'; // Import tx view\nimport {\n  withRouter\n} from 'react-router-dom'; // Import router\nimport QRCode from 'qrcode.react';\nimport {\n  Close\n} from 'grommet-icons'; // Import icons\nimport {\n  CopyToClipboard\n} from 'react-copy-to-clipboard'; // Import clipboard\nimport QrReader from 'react-qr-reader'; // Import qr code reader\nimport {\n  sha3_512\n} from 'js-sha3'; // Import sha3\nimport domtoimage from 'dom-to-image'; // Import print\nimport print from 'print-js'; // Import print\nimport Media from 'react-media';\n\nclass App extends Component {\n  errorAlert = (message) => toast.error(message); // Alert\n  infoAlert = (message) => toast.info(message); // Alert\n  successAlert = (message) => toast.success(message); // Alert\n\n  // construct a new App component instance\n  constructor(props) {\n    super(props); // Super props\n\n    const cookies = new Cookies(); // Initialize cookies\n\n    this.fetchBalance = this.fetchBalance.bind(this); // Bind this\n    this.onSubmitTx = this.onSubmitTx.bind(this); // Bind this\n    this.handleScan = this.handleScan.bind(this); // Bind this\n    this.handleScanError = this.handleScanError.bind(this); // Bind this\n    this.makeRedeemableAccount = this.makeRedeemableAccount.bind(this); // Bind this\n    this.showRedeemable = this.showRedeemable.bind(this); // Bind this\n\n    this.recipient_input = React.createRef(); // Create ref\n    this.printTriggerRef = React.createRef(); // Create ref\n\n    if (cookies.get(\"username\") !== \"\" && cookies.get(\"username\") !== \"not-signed-in\" && cookies.get(\"username\") !== undefined) { // Check signed in\n      this.fetchBalance(cookies.get('username')); // Fetch balance\n    }\n\n    this.state = {\n      username: cookies.get('username') || 'not-signed-in', // Get username cookie\n      address: cookies.get('address') || 'not-signed-in', // Get address cookie\n      password: cookies.get('password') || 'not-signed-in', // Get password cookie\n      showSendModal: false, // Set show send modal\n      showAddressModal: false, // Set show address modal\n      showQRReader: false, // Set show qr modal\n      alreadyPoppedRedeemable: false, // Set already popped\n      balance: 0, // Set balance\n      transactions: [], // Set transactions\n      sendAddressValue: \"\", // Set send addr\n      shouldMakeRedeemable: false, // Set should make redeemable\n      redeemableAccount: null, // Set redeemable account\n      lastPayload: \"\", // Set last payload\n      showRedeemableModal: false, // Set show redeemable modal\n      showRedeemModal: false, // Set show redeem modal\n    } // Set state\n  }\n\n  componentDidMount() {\n    const cookies = new Cookies(); // Initialize cookies\n\n    if (cookies.get(\"username\") !== \"\" && cookies.get(\"username\") !== \"not-signed-in\" && cookies.get(\"username\") !== undefined) { // Check signed in\n      fetch(\"/api/accounts/\" + cookies.get(\"username\") + \"/transactions\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }).then((response) => response.json())\n        .then(response => {\n          if (response.error) { // Check for errors\n            if (response.error.includes(\"no account exists with the given username\")) { // Check shouldn't be logged in\n              cookies.remove(\"username\"); // Remove account details\n              cookies.remove(\"password\"); // Remove account details\n              cookies.remove(\"address\"); // Remove account details\n\n              this.props.history.push(\"/\"); // Go to home\n            }\n\n            this.errorAlert(response.error); // Alert\n          } else if (!response.transactions) { // Check txs null\n            if (!this.state.alreadyPoppedRedeemable) { // Check has not already popped\n              this.infoAlert(\"Need some Virtual Cash? Look out for redeemable airdrop QR codes to earn your first coins.\"); // Alert\n\n              this.setState({\n                alreadyPoppedRedeemable: true\n              }); // Set state\n            }\n          } else {\n            this.setState({\n              transactions: response.transactions\n            }); // Set state txs\n\n            window.setInterval(() => {\n              var oldBalance = JSON.parse(JSON.stringify(this.state.balance)); // Get old balance\n\n              this.fetchBalance(this.state.username); // Refresh balance\n\n              if (this.state.balance !== oldBalance) { // Check did change\n                this.fetchTransactions(); // Fetch transactions\n              }\n            }, 1000); // Sync every 2 seconds\n          }\n        });\n    }\n  }\n\n  // render\n  render() {\n    if (this.state.username === 'not-signed-in' || this.state.username === '') { // Check not signed in\n      return <SignupLogin / > // Render signup/login page\n    }\n\n    return ( <\n      Grommet theme = {\n        theme\n      } >\n      <\n      ToastContainer / >\n      <\n      Box margin = {\n        {\n          top: \"large\",\n          left: \"large\",\n          right: \"large\"\n        }\n      }\n      align = \"center\"\n      direction = \"row\" >\n      <\n      Box margin = {\n        {\n          right: \"medium\"\n        }\n      } >\n      <\n      Blockies seed = {\n        this.state.address\n      }\n      size = {\n        5\n      }\n      scale = {\n        15\n      }\n      className = \"blocky\" / >\n      <\n      /Box> <\n      Box margin = {\n        {\n          left: \"none\"\n        }\n      } >\n      <\n      Heading responsive = {\n        true\n      }\n      size = \"medium\"\n      margin = \"none\" > {\n        this.state.username\n      } <\n      /Heading> <\n      Media query = \"(min-width:770px)\" >\n      <\n      Paragraph responsive = {\n        true\n      }\n      size = \"large\"\n      margin = {\n        {\n          top: \"xsmall\",\n          bottom: \"none\"\n        }\n      } > {\n        this.state.address\n      } <\n      /Paragraph> <\n      /Media> <\n      Media query = \"(max-width:779px)\" >\n      <\n      Media query = \"(min-width: 440px)\" >\n      <\n      Paragraph responsive = {\n        true\n      }\n      size = \"small\"\n      margin = {\n        {\n          top: \"xsmall\",\n          bottom: \"none\"\n        }\n      } > {\n        this.state.address\n      } <\n      /Paragraph> <\n      /Media> <\n      /Media> <\n      Paragraph responsive = {\n        true\n      }\n      size = \"medium\"\n      margin = {\n        {\n          top: \"xsmall\"\n        }\n      } >\n      Balance: {\n        this.state.balance\n      }\n      SMC <\n      /Paragraph> <\n      /Box> <\n      /Box> <\n      Heading responsive = {\n        true\n      }\n      size = \"medium\"\n      margin = {\n        {\n          left: \"large\",\n          top: \"medium\",\n          bottom: \"xsmall\"\n        }\n      } >\n      Transactions <\n      /Heading> <\n      Box overflow = {\n        {\n          \"vertical\": \"scroll\"\n        }\n      }\n      margin = {\n        {\n          left: \"large\"\n        }\n      }\n      height = \"50%\" > {\n        this.renderTransactions()\n      } <\n      /Box> <\n      Box direction = \"row\"\n      margin = {\n        {\n          left: \"large\"\n        }\n      }\n      align = \"baseline\"\n      alignContent = \"start\"\n      alignSelf = \"start\" >\n      <\n      Button primary label = \"Send\"\n      onClick = {\n        () => this.setState({\n          showSendModal: true\n        })\n      }\n      margin = {\n        {\n          top: \"small\"\n        }\n      }\n      color = \"sky\"\n      size = \"xlarge\" / >\n      <\n      Button label = \"Receive\"\n      onClick = {\n        () => this.setState({\n          showAddressModal: true\n        })\n      }\n      margin = {\n        {\n          top: \"small\",\n          left: \"small\"\n        }\n      }\n      size = \"xlarge\" / >\n      <\n      Button label = \"Redeem\"\n      onClick = {\n        () => this.setState({\n          showRedeemModal: true\n        })\n      }\n      margin = {\n        {\n          top: \"small\",\n          left: \"small\"\n        }\n      }\n      size = \"xlarge\" / > {\n        /* TODO: Write */ } <\n      /Box> {\n        this.state.showAddressModal ? this.showAddressModal() : null\n      } {\n        this.state.showSendModal ? this.showSendModal() : null\n      } {\n        this.state.showRedeemableModal ? this.showRedeemable() : null\n      } {\n        this.state.showRedeemModal ? this.showRedeem() : null\n      } <\n      /Grommet>\n    );\n  }\n\n  fetchBalancePure(username) {\n    return fetch(\"/api/accounts/\" + username + \"/balance\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((response) => response.json())\n      .then(response => {\n        var balance = 0; // Init balance buffer\n\n        if (response.error) { // Check for errors\n          this.errorAlert(response.error); // Error\n        } else {\n          balance = response.balance; // Set balance\n        }\n\n        return balance; // Return balance\n      });\n  }\n\n  fetchBalance(username) {\n    fetch(\"/api/accounts/\" + username + \"/balance\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((response) => response.json())\n      .then(response => {\n        var balance = 0; // Init balance buffer\n\n        if (response.error) { // Check for errors\n          this.errorAlert(response.error); // Error\n        } else {\n          balance = response.balance; // Set balance\n        }\n\n        this.setState({\n          balance: balance\n        }); // Set state\n      });\n  }\n\n  showRedeem() {\n    return ( <\n      Layer onEsc = {\n        () => this.setState({\n          showRedeemModal: false\n        })\n      }\n      onClickOutside = {\n        () => this.setState({\n          showRedeemModal: false\n        })\n      }\n      modal = {\n        true\n      }\n      responsive = {\n        false\n      } >\n      <\n      Box margin = {\n        {\n          right: \"medium\",\n          top: \"small\",\n          bottom: \"none\"\n        }\n      }\n      alignContent = \"end\"\n      align = \"end\" >\n      <\n      Close onClick = {\n        () => this.setState({\n          showRedeemModal: false\n        })\n      }\n      cursor = \"pointer\" / >\n      <\n      /Box> <\n      Box align = \"center\"\n      alignContent = \"center\"\n      direction = \"column\" >\n      <\n      Heading margin = {\n        {\n          left: \"xlarge\",\n          right: \"xlarge\",\n          top: \"none\"\n        }\n      }\n      responsive = {\n        true\n      } >\n      Scan a code!\n      <\n      /Heading> <\n      /Box> <\n      QrReader facingMode = \"environment\"\n      onScan = {\n        this.handleScan\n      }\n      onError = {\n        this.handleScanError\n      }\n      /> <\n      /Layer>\n    );\n  }\n\n  showAddressModal() {\n    return ( <\n      Layer onEsc = {\n        () => this.setState({\n          showAddressModal: false\n        })\n      }\n      onClickOutside = {\n        () => this.setState({\n          showAddressModal: false\n        })\n      }\n      modal = {\n        true\n      }\n      responsive = {\n        false\n      } >\n      <\n      Box margin = {\n        {\n          right: \"medium\",\n          top: \"small\",\n          bottom: \"small\"\n        }\n      }\n      alignContent = \"end\"\n      align = \"end\" >\n      <\n      Close onClick = {\n        () => this.setState({\n          showAddressModal: false\n        })\n      }\n      cursor = \"pointer\" / >\n      <\n      /Box> <\n      Box align = \"center\"\n      alignContent = \"center\"\n      direction = \"column\" >\n      <\n      QRCode value = {\n        this.state.address\n      }\n      size = {\n        512\n      }\n      /> <\n      CopyToClipboard text = {\n        this.state.address\n      } >\n      <\n      Button >\n      <\n      Paragraph responsive = {\n        true\n      } > {\n        this.state.address\n      } < /Paragraph> <\n      /Button> <\n      /CopyToClipboard> <\n      /Box> <\n      /Layer>\n    );\n  }\n\n  showSendModal() {\n    return ( <\n      Layer onEsc = {\n        () => this.setState({\n          showSendModal: false\n        })\n      }\n      onClickOutside = {\n        () => this.setState({\n          showSendModal: false\n        })\n      }\n      modal = {\n        true\n      }\n      responsive = {\n        false\n      } >\n      <\n      Box align = \"center\"\n      alignContent = \"center\"\n      direction = \"column\"\n      pad = \"medium\" >\n      <\n      Form onSubmit = {\n        this.onSubmitTx\n      } >\n      <\n      FormField name = \"amount\"\n      ref = {\n        \"amount_input\"\n      }\n      label = \"Amount\"\n      placeholder = \"1.23456\"\n      required = {\n        true\n      }\n      size = \"xxlarge\" / >\n      <\n      FormField name = \"recipient\"\n      label = \"Recipient\"\n      required = {\n        false\n      }\n      size = \"xxlarge\" >\n      <\n      TextInput ref = \"recipient_input\"\n      value = {\n        this.state.sendAddressValue\n      }\n      onChange = {\n        event => this.setState({\n          sendAddressValue: event.target.value\n        })\n      }\n      placeholder = \"@username / 0x1234\"\n      size = \"xxlarge\" / >\n      <\n      /FormField> <\n      FormField name = \"message\"\n      label = \"Message\"\n      placeholder = \"Say something nice!\"\n      required = {\n        false\n      }\n      size = \"xxlarge\" / >\n      <\n      Box align = \"center\"\n      alignContent = \"center\"\n      alignSelf = \"center\"\n      direction = \"row-responsive\" >\n      <\n      Button primary type = \"submit\"\n      label = \"Send\"\n      color = \"sky\" / >\n      <\n      Button primary margin = {\n        {\n          left: \"small\"\n        }\n      }\n      type = \"submit\"\n      label = \"Make Redeemable\"\n      onClick = {\n        () => this.setState({\n          shouldMakeRedeemable: true\n        })\n      }\n      color = \"sky\" / >\n      <\n      Button ref = {\n        this.recipient_input\n      }\n      margin = {\n        {\n          left: \"small\"\n        }\n      }\n      label = \"Scan QR Code\"\n      onClick = {\n        () => this.setState({\n          showQRReader: true\n        })\n      }\n      /> <\n      /Box> <\n      /Form> <\n      /Box> {\n        this.state.showQRReader ? this.showQRReader() : null\n      } <\n      /Layer>\n    )\n  }\n\n  makeRedeemableAccount() {\n    this.setState({\n      redeemableAccount: null, // Reset redeemable account\n    });\n\n    var redeemableUsername = this.state.username + \"_\" + Math.random().toString(36).substring(7); // Generate redeemable username\n    var redeemablePassword = sha3_512(Math.random().toString(36).substring(7)); // Generate redeemable password\n\n    return fetch(\"/api/accounts/\" + redeemableUsername, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          password: redeemablePassword, // Set password\n        })\n      }).then((response) => response.json())\n      .then(response => {\n        if (response.error) { // Check for errors\n          this.errorAlert(response.error); // Alert\n        } else {\n          this.setState({\n            redeemableAccount: {\n              username: redeemableUsername, // Set user\n              password: redeemablePassword, // Set pass\n            } // Set redeemable account\n          }) // Update state\n        }\n      });\n  }\n\n  showQRReader() {\n    return ( <\n      QrReader facingMode = \"environment\"\n      onScan = {\n        this.handleScan\n      }\n      onError = {\n        this.handleScanError\n      }\n      />\n    )\n  }\n\n  showRedeemable() {\n    return ( <\n      Layer onEsc = {\n        () => this.setState({\n          showRedeemableModal: false,\n          showSendModal: false,\n          showQRReader: false,\n          sendAddressValue: \"\",\n          shouldMakeRedeemable: false,\n          lastPayload: \"\"\n        })\n      }\n      onClickOutside = {\n        () => this.setState({\n          showRedeemableModal: false,\n          showSendModal: false,\n          showQRReader: false,\n          sendAddressValue: \"\",\n          shouldMakeRedeemable: false,\n          lastPayload: \"\"\n        })\n      }\n      modal = {\n        true\n      }\n      responsive = {\n        false\n      } >\n      <\n      Box margin = {\n        {\n          right: \"medium\",\n          top: \"small\",\n          bottom: \"small\"\n        }\n      }\n      alignContent = \"end\"\n      align = \"end\" >\n      <\n      Close onClick = {\n        () => this.setState({\n          showRedeemableModal: false,\n          showSendModal: false,\n          showQRReader: false,\n          sendAddressValue: \"\",\n          shouldMakeRedeemable: false,\n          lastPayload: \"\"\n        })\n      }\n      cursor = \"pointer\" / >\n      <\n      /Box> <\n      div id = \"print-contents\" >\n      <\n      Box align = \"center\"\n      alignContent = \"center\"\n      direction = \"column\" >\n      <\n      QRCode value = {\n        this.state.redeemableAccount.username + \"_\" + this.state.redeemableAccount.password\n      }\n      size = {\n        512\n      }\n      /> <\n      Paragraph responsive = {\n        true\n      } > {\n        this.state.lastPayload\n      } < /Paragraph> <\n      /Box> <\n      /div> <\n      Button primary onClick = {\n        () => this.printContents()\n      }\n      label = \"Print\"\n      margin = {\n        {\n          top: \"none\",\n          bottom: \"small\",\n          left: \"small\",\n          right: \"small\"\n        }\n      }\n      color = \"sky\"\n      size = \"xlarge\" / >\n      <\n      /Layer>\n    )\n  }\n\n  printContents() {\n    const node = document.getElementById(\"print-contents\"); // Get node\n\n    domtoimage.toJpeg(node, {\n        bgcolor: \"white\"\n      }) // Generate PNG image\n      .then((dataUrl) => {\n        print({\n          printable: dataUrl,\n          type: \"image\",\n          imageStyle: \"width:70%; height:70%;transform:rotate(-90deg);margin-top:-2%;\"\n        }); // Print\n      })\n      .catch(function (error) {\n        console.error('oops, something went wrong!', error); // Log error\n      });\n  }\n\n  handleScan(scan) {\n    if (scan) { // Check scanned\n      if (!scan.includes(\"@\") && !scan.includes(\"0x\") && !scan.includes(\"_\")) { // Check is not tx\n        this.errorAlert(\"Invalid QR code (must be @username or 0x1234 address)\"); // Alert\n      } else if (scan.includes(\"@\") || scan.includes(\"0x\")) {\n        this.setState({\n          showQRReader: false,\n          sendAddressValue: scan\n        }); // Hide reader\n      } else if (scan.includes(\"_\")) {\n        var redeemableAccount = {\n          username: scan.split(\"_\")[0] + \"_\" + scan.split(\"_\")[1],\n          password: scan.split(\"_\")[2],\n        } // Get acc\n\n        fetch(\"/api/accounts/\" + redeemableAccount.username + \"/authenticate\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              password: redeemableAccount.password,\n            })\n          }).then((response) => response.json())\n          .then(response => {\n            if (response.error) { // Check for errors\n              this.errorAlert(response.error); // Log error\n            } else {\n              var redeemableBalance = 0; // Init buffer\n\n              this.fetchBalancePure(redeemableAccount.username)\n                .then((balance) => {\n                  redeemableBalance = balance; // Set redeemable balance\n\n                  fetch(\"/api/transactions/NewTransaction\", {\n                      method: \"POST\",\n                      headers: {\n                        \"Content-Type\": \"application/json\",\n                      },\n                      body: JSON.stringify({\n                        username: redeemableAccount.username, // Set username\n                        password: redeemableAccount.password, // Set password\n                        recipient: this.state.address, // Set username\n                        amount: redeemableBalance, // Send entire balance\n                      })\n                    })\n                    .then((response) => response.json())\n                    .then(response => {\n                      if (response.error) { // Check for errors\n                        this.errorAlert(response.error); // Log error\n                      } else {\n                        this.fetchBalance(this.state.username); // Check balance\n                        this.fetchTransactions(); // Check txs\n\n                        this.setState({\n                          showRedeemModal: false,\n                          showQRReader: false\n                        }); // Close modal\n\n                        fetch(\"/api/accounts/\" + redeemableAccount.username, {\n                            method: \"DELETE\",\n                            headers: {\n                              \"Content-Type\": \"application/json\",\n                            },\n                            body: JSON.stringify({\n                              username: redeemableAccount.username, // Set username\n                              password: redeemableAccount.password, // Set password\n                            })\n                          })\n                          .then((response) => response.json())\n                          .then(response => {\n                            if (response.error) {\n                              this.errorAlert(response.error); // Alert\n                            }\n                          })\n                      }\n                    })\n                });\n            }\n          })\n      }\n    }\n  }\n\n  handleScanError(err) {\n    this.errorAlert(err); // Alert\n  }\n\n  // onSubmitTx handles the tx form submit event.\n  onSubmitTx(event) {\n    event.preventDefault(); // Prevent default\n\n    var formData = JSON.parse(JSON.stringify(event.value)); // Get from data\n\n    if (this.state.shouldMakeRedeemable) { // Check is processing elsewhere\n      this.setState({\n        shouldMakeRedeemable: false,\n        lastPayload: formData.message\n      }); // Reset\n\n      this.makeRedeemableAccount()\n        .then(() => fetch(\"/api/transactions/NewTransaction\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            username: this.state.username, // Set username\n            recipient: this.state.redeemableAccount.username, // Set recipient\n            amount: parseFloat(formData.amount), // Set amount\n            password: this.state.password, // Set password\n            payload: formData.message, // Set message\n          })\n        }))\n        .then((response) => response.json())\n        .then(response => {\n          if (response.error) { // Check for errors\n            this.errorAlert(response.error); // Alert\n\n            return; // Return\n          }\n\n          this.fetchTransactions(); // Fetch transactions\n\n          this.setState({\n            showSendModal: false,\n            showQRReader: false,\n            sendAddressValue: \"\",\n            showRedeemableModal: true,\n          }); // Set show redeemable modal\n        }); // Make redeemable\n\n      return; // Return\n    }\n\n    if (!formData.recipient) { // Check needs manual set\n      formData.recipient = this.refs.recipient_input.value; // Get address\n    }\n\n    formData.recipient = formData.recipient.replace(\"@\", \"\"); // Remove @ symbol\n\n    fetch(\"/api/transactions/NewTransaction\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username: this.state.username, // Set username\n          recipient: formData.recipient, // Set recipient\n          amount: parseFloat(formData.amount), // Set amount\n          password: this.state.password, // Set password\n          payload: formData.message,\n        })\n      }).then((response) => response.json())\n      .then(response => {\n        if (response.error) { // Check for errors\n          this.errorAlert(response.error); // Alert\n        } else {\n          this.successAlert(\"Transaction sent successfully!\"); // Alert success\n        }\n\n        this.fetchTransactions(); // Fetch transactions\n\n        this.setState({\n          showSendModal: false,\n          showQRReader: false,\n          sendAddressValue: \"\",\n        }); // Set state\n      })\n  }\n\n  // fetchTransactions fetches all account txs.\n  fetchTransactions() {\n    const cookies = new Cookies(); // Initialize cookies\n\n    if (cookies.get(\"username\") !== \"\" && cookies.get(\"username\") !== \"not-signed-in\" && cookies.get(\"username\") !== undefined) { // Check signed in\n      fetch(\"/api/accounts/\" + cookies.get(\"username\") + \"/transactions\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }).then((response) => response.json())\n        .then(response => {\n          if (response.error) { // Check for errors\n            if (response.error.includes(\"no account exists with the given username\")) { // Check shouldn't be logged in\n              cookies.remove(\"username\"); // Remove account details\n              cookies.remove(\"password\"); // Remove account details\n              cookies.remove(\"address\"); // Remove account details\n\n              this.props.history.push(\"/\"); // Go to home\n            }\n\n            this.errorAlert(response.error); // Alert\n          } else if (!response.transactions) { // Check txs null\n            if (!this.state.alreadyPoppedRedeemable) { // Check has not already popped\n              this.infoAlert(\"Need some Virtual Cash? Look out for redeemable airdrop QR codes to earn your first coins.\"); // Alert\n\n              this.setState({\n                alreadyPoppedRedeemable: true\n              }); // Set state\n            }\n          } else {\n            this.setState({\n              transactions: response.transactions\n            }); // Set state txs\n          }\n        });\n    }\n  }\n\n  // renderTransactions renders the transaction views.\n  renderTransactions() {\n    var transactionViews = []; // Init tx views\n\n    var x; // Init iterator\n\n    for (x = 0; x < this.state.transactions.length; x++) { // Iterate through txs\n      var type = \"send\"; // Init type buffer\n\n      if (x > 0 && this.state.transactions[x - 1].hash === this.state.transactions[x].hash && this.state.transactions[x].recipient === this.state.address && this.state.transactions[x].sender === this.state.address) { // Check not out of bounds\n        type = \"receive\"; // Set type\n      } else if (this.state.transactions[x].recipient !== this.state.address) { // Check is sending\n        type = \"send\"; // Set send\n      } else if (this.state.transactions[x].recipient === this.state.address) { // Check is receiving\n        type = \"receive\"; // Set receive\n      }\n\n      switch (type) {\n        case \"send\":\n          transactionViews.push( <\n            TransactionView key = {\n              x\n            }\n            margin = \"none\"\n            gap = \"small\"\n            type = {\n              type\n            }\n            timestamp = {\n              this.state.transactions[x].time\n            }\n            recipient = {\n              this.state.transactions[x].recipient.toString()\n            }\n            amount = {\n              this.state.transactions[x].amount\n            }\n            />\n          ); // Push tx\n\n          break;\n        case \"receive\":\n          transactionViews.push( <\n            TransactionView key = {\n              x\n            }\n            margin = \"none\"\n            gap = \"small\"\n            type = {\n              type\n            }\n            timestamp = {\n              this.state.transactions[x].time\n            }\n            sender = {\n              this.state.transactions[x].sender.toString()\n            }\n            amount = {\n              this.state.transactions[x].amount\n            }\n            />\n          ); // Push tx\n\n          break;\n        default:\n          break;\n      }\n    }\n\n    return transactionViews; // Return tx views\n  }\n}\n\nexport default withRouter(App); // Force use router","import React, { Component } from 'react'\nimport { theme } from './SummerTechTheme'; // Import SummerTech theme\nimport { Grommet, Box, Form, FormField, TextInput, Button } from 'grommet'; // Import grommet\nimport Cookies from 'universal-cookie'; // Import cookies\nimport { withRouter } from 'react-router-dom'; // Import router\nimport { ToastContainer, toast } from 'react-toastify'; // Import toast\nimport 'react-toastify/dist/ReactToastify.css'; // Import toast styling\n\nclass AuthForm extends Component {\n  errorAlert = (message) => toast.error(message); // Alert\n\n  constructor (props) {\n    super(props); // Super props\n\n    const cookies = new Cookies(); // Initialize cookies\n\n    if (cookies.get(\"username\") !== undefined && cookies.get(\"username\") !== \"\" && cookies.get(\"username\") !== \"not-signed-in\") { // Check already signed in\n      fetch(\"/api/accounts/\"+cookies.get(\"username\")+\"/authenticate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          password: cookies.get(\"password\"),\n        })\n      }).then((response) => response.json())\n      .then(response => {\n        cookies.set('address', response.address); // Set address\n  \n        this.setState({\n          username: cookies.get('username') || 'not-signed-in', // Set username cookie\n          password: cookies.get('password') || 'not-signed-in', // Set password\n          address: cookies.get('address') || 'not-signed-in', // Set address\n        }) // Set state\n\n        this.props.history.push(\"/\"); // Go to app\n      })\n    }\n\n    this.onSubmit = this.onSubmit.bind(this); // Bind onSubmit\n\n    this.password_text_input = React.createRef(); // Create password input ref\n  }\n\n  render() {\n    return (\n      <Grommet theme={ theme }>\n        <ToastContainer/>\n        <Box justify=\"center\" align=\"center\" fill={ true } basis=\"large\">\n          <Form onSubmit={ this.onSubmit }>\n            <FormField name=\"name\" label=\"Name\" required={ true } size=\"xxlarge\"/>\n            <FormField ref=\"password_input\" label=\"Password\" required={ false } value=\"\">\n              <TextInput ref=\"password_text_input\" type=\"password\" name=\"password\" label=\"Password\" size=\"xxlarge\"/>\n            </FormField>\n            <Button type=\"submit\" onClick={ this.alert } primary label={ this.props.label } margin={{ top: \"small\" }} color=\"sky\" size=\"large\"/>\n          </Form>\n        </Box>\n      </Grommet>\n    )\n  }\n\n  // onSubmit submits the auth form.\n  onSubmit (event) {\n    event.preventDefault(); // Prevent default\n\n    var formData = event.value; // Get form data\n    formData.password = this.refs.password_text_input.value; // Get password\n\n    if (this.props.label === \"Sign Up\") { // Check is create account form\n      this.onSubmitCreate(formData); // Submit create\n    } else {\n      this.onSubmitAuth(formData); // Submit auth\n    }\n  }\n\n  // onSubmitCreate is the onSubmit event for a Sign Up form.\n  onSubmitCreate (formData) {\n    fetch(\"/api/accounts/\"+formData.name, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        password: formData.password,\n      })\n    }).then((response) => response.json())\n    .then(response => {\n      if (response.error) { // Check for errors\n        this.errorAlert(response.error); // Alert\n      } else {\n        const cookies = new Cookies(); // Initialize cookies\n\n        cookies.set('username', formData.name); // Set username\n        cookies.set('password', formData.password); // Set password\n        cookies.set('address', response.address); // Set address\n\n        this.setState({\n          username: cookies.get('username') || 'not-signed-in', // Get username cookie\n          password: cookies.get('password') || 'not-signed-in', // Set password\n          address: cookies.get('address') || 'not-signed-in', // Get address\n        }) // Set state\n\n        this.props.history.push(\"/\"); // Go to app\n      }\n    })\n  }\n\n  // onSubmitAuth is the onSubmit event for a Log In form.\n  onSubmitAuth (formData) {\n    fetch(\"/api/accounts/\"+formData.name+\"/authenticate\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        password: formData.password,\n      })\n    }).then((response) => response.json())\n    .then(response => {\n      if (response.error) { // Check for errors\n        this.errorAlert(response.error); // Alert with error\n      } else {\n        const cookies = new Cookies(); // Initialize cookies\n\n        cookies.set('username', formData.name); // Set username\n        cookies.set('password', formData.password); // Set password\n        cookies.set('address', response.address); // Set address\n\n        this.setState({\n          username: cookies.get('username') || 'not-signed-in', // Get username cookie\n          password: cookies.get('password') || 'not-signed-in', // Set password\n          address: cookies.get('address') || 'not-signed-in', // Get address\n        }) // Set state\n\n        this.props.history.push(\"/\"); // Go to app\n      }\n    })\n  }\n}\n\nexport default withRouter(AuthForm); // Force use router","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AuthForm from './AuthForm';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { routerReducer } from 'react-router-redux';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\n\nconst store = createStore(\n    combineReducers({\n        routing: routerReducer,\n    })\n) // Init store\n\nconst routing = (\n    <Provider store={store}>\n        <Router>\n            <div>\n                <Route exact path=\"/\" component={ App }/>\n                <Route path=\"/signup\" render={ ()=><AuthForm label=\"Sign Up\"/> }/>\n                <Route path=\"/login\" render={ ()=><AuthForm label=\"Log In\"/> }/>\n            </div>\n        </Router>\n    </Provider>\n)\n\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}